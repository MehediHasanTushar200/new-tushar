@model hamko.Models.Purchase
@{
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<!-- jQuery -->


<!-- Select2 CSS & JS -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>


<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-12 col-md-12 rounded border p-4 shadow-sm bg-white">

            <form method="post" asp-controller="Purchase" id="purchaseForm">
                <!-- Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <a asp-controller="" asp-action="https://localhost:7133/Purchase" class="btn btn-primary fw-semibold rounded-pill px-4">
                        <i class="fas fa-list me-2"></i> List
                    </a>
                    <h3 class="m-0">New Purchase Add</h3>
                    <div></div>
                </div>

                <!-- First row -->
                <div class="row g-3 mb-3">
                    <div class="col-md-4">
                        <label class="form-label fw-semibold">Invoice No</label>
                        <input type="text" class="form-control" name="InvoiceNo" value="@Model?.InvoiceNo" readonly />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-semibold">Reference No</label>
                        <input type="text" class="form-control" name="RefNo" value="@Model.RefNo" readonly />
                    </div>

                    <div class="col-md-4">
                        <label class="form-label fw-semibold">Date <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="Date" name="Date" required placeholder="Select Date" autocomplete="off" />
                        <small class="text-muted mt-1 d-block" id="currentTime"></small>
                    </div>
                </div>

                <!-- Second row -->
                <div class="row g-3 mb-3">

                    <div class="col-md-4">
                        <label for="UserId" class="form-label fw-semibold">User <span class="text-danger">*</span></label>
                        <select id="UserId" name="UserId" class="form-select" required>
                            <option value="" disabled selected>Select User</option>
                            @foreach (var user in ViewBag.Users)
                            {
                                <option value="@user.Id">@user.UserName</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="SupplierId" class="form-label fw-semibold">Supplier <span class="text-danger">*</span></label>
                        <select id="SupplierId" name="SupplierId" class="form-select" required>
                            <option value="" disabled selected>Select Supplier</option>
                            @foreach (var supplier in ViewBag.Suppliers)
                            {
                                <option value="@supplier.Id">@supplier.Name</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="Status" class="form-label fw-semibold">Status</label>
                        <select id="Status" name="Status" class="form-select" required>
                            <option value="Active" selected>Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>

                </div>


                <!-- Items Table -->
                <div class="table-responsive mb-3">
                    <table class="table table-bordered align-middle text-center">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>Product Name</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th>Total Price</th>
                            </tr>
                        </thead>
                        <tbody id="DetailsTable">
                            <tr>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm remove-row" title="Delete Row" disabled>
                                        <i class="fas fa-times"></i>
                                    </button>
                                </td>
   <td>
                            <select class="form-select select2" name="StockIns[0].ProductId" required>
                                <option value="">Select</option>
                                @foreach (var product in ViewBag.Products)
                                {
                                    <option value="@product.Id">@product.Name</option>
                                }
                            </select>
                        </td>


                                <td><input type="number" class="form-control qty-input" name="StockIns[0].Quantity" min="0" step="0.01" required /></td>
                                <td><input type="number" class="form-control price-input" name="StockIns[0].Price" min="0" step="0.01" required /></td>
                                <td><input type="text" class="form-control total-input" name="StockIns[0].TotalPrice" readonly /></td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Row Count and Add -->
                <div class="d-flex align-items-center gap-3 mb-3">
                    <div class="input-group" style="width: 140px;">
                        <button type="button" class="btn btn-outline-primary" id="btn-decrement">–</button>
                        <input type="number" id="rowCount" class="form-control text-center" value="1" min="1" />
                        <button type="button" class="btn btn-outline-primary" id="btn-increment">+</button>
                    </div>
                    <button type="button" class="btn btn-success fw-semibold px-4" id="btn-add-row">Add Row</button>
                </div>

                <!-- Submit -->
                <div class="d-flex justify-content-end gap-3">
                    <button type="submit" class="btn btn-primary fw-semibold px-4" id="submitBtn">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        $('.select2').select2({
            placeholder: "Select an option",
            allowClear: true,
            width: '100%'
        });
    });

    flatpickr("#Date", {
        dateFormat: "Y-m-d",
        defaultDate: new Date()
    });

    function updateCurrentTime() {
        document.getElementById('currentTime').textContent = 'Current Time: ' + new Date().toLocaleTimeString();
    }
    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);

    const detailsTable = document.getElementById('DetailsTable');
    const rowCountInput = document.getElementById('rowCount');
    const btnAddRow = document.getElementById('btn-add-row');
    const btnIncrement = document.getElementById('btn-increment');
    const btnDecrement = document.getElementById('btn-decrement');
    const form = document.getElementById('purchaseForm');
    const submitBtn = document.getElementById('submitBtn');

    function updateRemoveButtons() {
        const removeButtons = detailsTable.querySelectorAll('.remove-row');
        if (removeButtons.length === 1) {
            removeButtons[0].setAttribute('disabled', 'disabled');
        } else {
            removeButtons.forEach(btn => btn.removeAttribute('disabled'));
        }
    }

    function reindexRows() {
        const rows = detailsTable.querySelectorAll('tr');
        rows.forEach((row, i) => {
            row.querySelectorAll('input, select').forEach(el => {
                const match = el.name.match(/StockIns\[\d+\]\.(\w+)/);
                if (match) {
                    const field = match[1];
                    el.name = `StockIns[${i}].${field}`;
                }
            });
        });
    }

    function calculateRowTotal(row) {
        const qty = parseFloat(row.querySelector('.qty-input')?.value) || 0;
        const price = parseFloat(row.querySelector('.price-input')?.value) || 0;
        const total = qty * price;
        const totalField = row.querySelector('.total-input');
        if (totalField) totalField.value = total.toFixed(2);
    }

    function calculateTotal() {
        detailsTable.querySelectorAll('tr').forEach(row => {
            calculateRowTotal(row);
        });
    }

    function resetRowInputs(row) {
        // Clear all input fields except total-input (set to 0.00)
        row.querySelectorAll('input').forEach(input => {
            if (!input.classList.contains('total-input')) input.value = '';
            else input.value = '0.00';
        });

        // Reset selects and destroy Select2 instances
        row.querySelectorAll('select').forEach(select => {
            if ($(select).hasClass('select2-hidden-accessible')) {
                $(select).select2('destroy');
            }
            select.selectedIndex = 0;
        });
    }

    function addRows(count = 1) {
        const firstRow = detailsTable.rows[0];

        for (let i = 0; i < count; i++) {
            // Destroy Select2 on firstRow selects before cloning to avoid issues
            firstRow.querySelectorAll('select').forEach(select => {
                if ($(select).hasClass('select2-hidden-accessible')) {
                    $(select).select2('destroy');
                }
            });

            const newRow = firstRow.cloneNode(true);

            // Reset inputs and selects
            resetRowInputs(newRow);

            detailsTable.appendChild(newRow);

            // Reinitialize Select2 on firstRow and newRow selects
            $(firstRow).find('.select2').select2({
                placeholder: "Select an option",
                allowClear: true,
                width: '100%'
            });
            $(newRow).find('.select2').select2({
                placeholder: "Select an option",
                allowClear: true,
                width: '100%'
            });
        }

        reindexRows();
        updateRemoveButtons();
        calculateTotal();
    }

    function deleteRow(button) {
        if (detailsTable.rows.length <= 1) {
            alert('At least one row must remain.');
            return;
        }
        button.closest('tr').remove();
        reindexRows();
        updateRemoveButtons();
        calculateTotal();
    }

    // Remove row button handler
    detailsTable.addEventListener('click', e => {
        if (e.target.closest('.remove-row')) {
            deleteRow(e.target.closest('.remove-row'));
        }
    });

    // Update total price when quantity or price changes
    detailsTable.addEventListener('input', e => {
        if (e.target.classList.contains('qty-input') || e.target.classList.contains('price-input')) {
            const row = e.target.closest('tr');
            calculateRowTotal(row);
        }
    });

    // Add row button click
    btnAddRow.addEventListener('click', () => {
        const count = parseInt(rowCountInput.value) || 1;
        addRows(count);
    });

    // Increment/decrement buttons for row count input
    btnIncrement.addEventListener('click', () => {
        let count = parseInt(rowCountInput.value) || 1;
        rowCountInput.value = count + 1;
    });

    btnDecrement.addEventListener('click', () => {
        let count = parseInt(rowCountInput.value) || 1;
        if (count > 1) rowCountInput.value = count - 1;
    });

    // Disable submit button on form submission to prevent double submit
    form.addEventListener('submit', e => {
        if (submitBtn.disabled) {
            e.preventDefault();
            return false;
        }
        submitBtn.disabled = true;
    });

    // Initial setup
    updateRemoveButtons();
    calculateTotal();
</script>
